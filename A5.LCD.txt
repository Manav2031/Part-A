FUNCTION TABLE

rst
1
0
0
0
0
0
0
0
0

clk_12MHz / 65536
x
↑
↑
↑
↑
↑
↑
↑
↑

lcd_data
38h
06h
0Ch
01h
50h (P)
49h (I)
43h (C)
54h (T)
20h ( )

lcd_rs lcd_en
0
x
↑
0
↑
0
↑
0
↑
1
↑
1
↑
1
↑
1
↑
1

MAIN VHDL MODEL ( MVM )
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity LCD_FSM is
Port ( rst : in std_logic;
-- reset
clk_12Mhz : in std_logic;
-- high freq. clock
lcd_rs : out std_logic;
-- LCD RS control
lcd_en : out std_logic;
-- LCD Enable
lcd_data : out std_logic_vector(7 downto 0));
-- LCD Data port
end LCD_FSM;
architecture Behavioral of LCD_FSM is
signal div : std_logic_vector(15 downto 0); --- delay timer 1
signal clk_fsm,lcd_rs_s: std_logic;
-- LCD controller FSM states
type state is (reset,func,mode,cur,clear,d0,d1,d2,d3,d4,hold);
signal ps1,nx : state;
signal dataout_s : std_logic_vector(7 downto 0); --- internal data command multiplexer
begin
----- clk divider --------------------------------process(rst,clk_12Mhz)
begin
if(rst = '1')then
div <= (others=>'0');
elsif( clk_12Mhz'event and clk_12Mhz ='1')then
div <= div + 1;
HARSH

3

end if;
end process;
---------------------------------------------------clk_fsm <= div(15);
----- Presetn state Register ----------------------process(rst,clk_fsm)
begin
if(rst = '1')then
ps1
<= reset;
elsif (rising_edge(clk_fsm)) then
ps1
<= nx;
end if;
end process;
----- state and output decoding process
process(ps1)
begin
case(ps1) is
when reset =>

when func

when mode

when cur

nx
<= func;
lcd_rs_s
<= '0';
dataout_s
<= "00111000";

-- 38h

=>
nx
<= mode;
lcd_rs_s
<= '0';
dataout_s
<= "00111000";

-- 38h

=>
nx
<= cur;
lcd_rs_s
<= '0';
dataout_s
<= "00000110";

-- 06h

=>
nx
<= clear;
lcd_rs_s
<= '0';
dataout_s
<= "00001100";

-- 0Ch curser at starting point of

nx
<= d0;
lcd_rs_s
<= '0';
dataout_s
<= "00000001";

-- 01h

=>
lcd_rs_s
dataout_s

-- P ( Decimal = 80 , HEX = 50 )

line1
when clear=>

when d0

HARSH

<= '1';
<= "01010000";

4

nx
when d1

when d2

when d3

when d4

when hold

<= d1;

=>
lcd_rs_s
<= '1';
dataout_s
<= "01001001";
nx
<= d2;
=>
lcd_rs_s
<= '1';
dataout_s
<= "01000011";
nx
<= d3;
=>
lcd_rs_s
<= '1';
dataout_s
<= "01010100";
nx
<= d4;
=>
lcd_rs_s
<= '1';
dataout_s
<= "00100000";
nx
<= hold;
=>
lcd_rs_s
dataout_s

<= '0';
<= "00000000";

-- I ( Decimal = 73 , HEX = 49 )

-- C ( Decimal = 67 , HEX = 43 )

-- T ( Decimal = 84 , HEX = 54 )

-- space ( Decimal = 32 , HEX = 20 )

-- hold ( Decimal = 32 , HEX = 00 ) ,

NULL
nx

<= hold;

when others=>
nx
<= reset;
lcd_rs_s
<= '0';
dataout_s
<= "00000001";

-- CLEAR ( Decimal = 1 , HEX = 01 )

end case;
end process;

lcd_en <= clk_fsm;
lcd_rs <= lcd_rs_s;
lcd_data <= dataout_s;
end Behavioral;

HARSH

5

TESTBENCH VHDL MODEL ( TVM )

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY LCD_Test IS
END LCD_Test;
ARCHITECTURE behavior OF LCD_Test IS
-- Component Declaration for the Unit Under Test (UUT)
COMPONENT LCD_FSM
PORT(
rst : IN std_logic;
clk_12Mhz : IN std_logic;
lcd_rs : OUT std_logic;
lcd_en : OUT std_logic;
lcd_data : OUT std_logic_vector(7 downto 0)
);
END COMPONENT;

--Inputs
signal rst : std_logic := '0';
signal clk_12Mhz : std_logic := '0';
--Outputs
signal lcd_rs : std_logic;
signal lcd_en : std_logic;
signal lcd_data : std_logic_vector(7 downto 0);
-- Clock period definitions
constant clk_12Mhz_period : time := 10 ns;
BEGIN
-- Instantiate the Unit Under Test (UUT)
uut: LCD_FSM PORT MAP (
rst => rst,
clk_12Mhz => clk_12Mhz,
lcd_rs => lcd_rs,
lcd_en => lcd_en,
lcd_data => lcd_data
);
-- Clock process definitions
clk_12Mhz_process :process
begin
HARSH

10

clk_12Mhz <= '0';
wait for clk_12Mhz_period/2;
clk_12Mhz <= '1';
wait for clk_12Mhz_period/2;
end process;

-- Stimulus process
stim_proc: process
begin
rst <= '1';
wait for 20 ns;
rst <= '0';
-- insert stimulus here
wait;
end process;
END;

HARSH

11

PIN-LOCKING REPORT

# PlanAhead Generated physical constraints
NET "clk_12Mhz" LOC = P80;
NET "rst" LOC = P204;
NET "lcd_rs" LOC = P48;
NET "lcd_en" LOC = P49;
NET "lcd_data[0]" LOC = P47;
NET "lcd_data[1]" LOC = P41;
NET "lcd_data[2]" LOC = P39;
NET "lcd_data[3]" LOC = P35;
NET "lcd_data[4]" LOC = P33;
NET "lcd_data[5]" LOC = P31;
NET "lcd_data[6]" LOC = P29;
NET "lcd_data[7]" LOC = P24;

CONCLUSION
Thus, we have:
1) Modeled a FPGA-LCD Interfacing using Behavioral Modeling Style.
2) Observed following Schematics: RTL & Technology Schematics generated Post-Synthesis.
3) Interpreted Device Utilization Summary in terms of LUTs, SLICES, IOBs, Multiplexers &D FFs
used out of the available device resources.
4) Interpreted the TIMING Report in terms of Maximum combinational delay as indicative of
the Maximum Operating Frequency.
5) Written a TESTBENCH to verify the functionality of FPGA-LCD Interfacing & verified the
functionality asper the FUNCTION-TABLE, by observing ISIM Waveforms.
6) Used PlanAhead Editor for pin-locking.
7) Prototyped the FPGA XC3S250EPQ208-5 to realize FPGA-LCD Interfacing & verified its
operation by givingsuitable input combinations.

HARSH

13

